// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Tags {
  Acción
  Aventura
  Comedia
  Drama
  Terror
  Ciencia_Ficción
  Fantasía
  Suspenso
  Romance
  Musical
  Animada
  Documental
  Crimen
  Bélica
  Histórica
  Western
  Deportes
  Policial
  Thriller_Psicológico
  Superhéroes
  Noir
  Biográfica
  Artes_Marciales
  Espionaje
  Zombis
  Apocalíptica
  Catástrofes
}

enum Role {
  admin
  user
}

model Movie {
  id               String             @id @default(uuid())
  title            String
  description      String
  durationMin      Int
  tags             Tags[]
  PrincipalImage   PrincipalImage[]
  Images           Images[]
  MovieTransmition MovieTransmition[]
}

model PrincipalImage {
  id      Int    @id @default(autoincrement())
  Url     String
  movie   Movie  @relation(fields: [movieId], references: [id])
  movieId String @unique
}

model Images {
  id      Int    @id @default(autoincrement())
  Url     String
  movie   Movie  @relation(fields: [movieId], references: [id])
  movieId String
}

model User {
  id          String    @id @default(uuid())
  name        String
  password    String
  email       String    @unique
  emailVerify DateTime?
  role        Role      @default(user)
  image       String?
  Ticket      Ticket[]
}

model MovieTheater {
  id               String             @id @default(uuid())
  capacity         Int
  MovieTransmition MovieTransmition[]
}

model MovieTransmition {
  id             String       @id @default(uuid())
  movie          Movie        @relation(fields: [movieId], references: [id])
  movieId        String
  date           DateTime
  time           DateTime
  Price          Float
  movieTheater   MovieTheater @relation(fields: [movieTheaterId], references: [id])
  movieTheaterId String
  Ticket         Ticket[]
}

model Ticket {
  id                 String           @id @default(uuid())
  movieTransmition   MovieTransmition @relation(fields: [movieTransmitionId], references: [id])
  movieTransmitionId String
  user               User             @relation(fields: [userId], references: [id])
  userId             String
  createdAt          DateTime         @default(now())
}
